node{
   stage('GIT CHECKOUT')
   {
	try {
		git branch: 'master', credentialsId: 'github_pwd', url: 'https://github.com/deepanshu1994/demo'
		}
    catch(err) {
				throw(err)
				}
   }
   stage("BUILD & SONARQUBE ANALYSIS") 
   {
	try {
        withSonarQubeEnv('sonarqube') 
			{
				def mvnHome = tool name: 'maven', type: 'maven'
				def mvnCMD = "${mvnHome}/bin/mvn"
				//sh '${mvnCMD} clean package sonar:sonar'
				def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
				sh "${mvnCMD} clean package org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar"
				//sh "${scannerHome}/bin/sonar-scanner"
			}
		}
	 catch(err) {
				throw(err)
				}
    }
    stage("QUALITY GATE STATUS") 
    {
		try {
				timeout(time: 10, unit: 'MINUTES') 
				{
					waitForQualityGate abortPipeline: true
				}
			}
	 catch(err) {
				throw(err)
				}
    }
   stage('DOCKER IMAGE BUILD')
   {
		try {
			 def docHome = tool name: 'docker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
			 def docCMD = "${docHome}/bin/docker"
			 sh "${docCMD} build -t da9916/demo:${Build_Number} ."
			 }
	 catch(err) {
				throw(err)
				} 
   }
   stage('PUSH IMAGE DOCKER HUB')
   {
		try {
			 def docHome = tool name: 'docker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
			 def docCMD = "${docHome}/bin/docker"
			 withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerhubpwd')]) 
			 {
				sh "${docCMD} login -u da9916 -p ${dockerHubPwd}"
			 }
			 sh "${docCMD} push da9916/demo:${Build_Number}"
			 sh "${docCMD} rmi da9916/demo:${Build_Number}"
			 }
	 catch(err) {
				throw(err)
				}
   }
}

stage('DEPLOY APPROVAL'){
try {
    //input "DEPLOY TO DEV SERVER?"
    def userInput = true
    timeout(time: 60, unit: 'SECONDS') 
        { // change to a convenient timeout for you
                userInput = input(
                id: 'Proceed', message: "Would you like to deploy build : ${env.BUILD_NUMBER}?", parameters: [
                [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']
                ])
        }
	}
catch(err) {
		throw(err)
		}	
}
